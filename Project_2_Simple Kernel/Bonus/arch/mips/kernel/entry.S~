#include "asm.h"

.equ    KERNEL, 0
.equ    USER,   156

.macro STI
.endm

.macro CLI
.endm

LEAF(asm_start)
    mtc0    zero, CP0_STATUS
    mtc0    zero, CP0_WATCHLO
    mtc0    zero, CP0_WATCHHI

    mfc0    t0, CP0_CONFIG
    and     t0, ~0x7
    ori     t0, 0x2
    mtc0    t0, CP0_CONFIG
    
    jr  ra
END(asm_start)

.macro SAVE_CONTEXT offset
    .set noat
    la	k0, current_running
    lw	k0, 0(k0)
    addi k0, k0, \offset

    sw	$0 , OFFSET_REG0(k0)
    sw	$1 , OFFSET_REG1(k0)
    sw	$2 , OFFSET_REG2(k0)
    sw	$3 , OFFSET_REG3(k0)
    sw	$4 , OFFSET_REG4(k0)
    sw	$5 , OFFSET_REG5(k0)
    sw	$6 , OFFSET_REG6(k0)
    sw	$7 , OFFSET_REG7(k0)
    sw	$8 , OFFSET_REG8(k0)
    sw	$9 , OFFSET_REG9(k0)
    sw	$10, OFFSET_REG10(k0)
    sw	$11, OFFSET_REG11(k0)
    sw	$12, OFFSET_REG12(k0)
    sw	$13, OFFSET_REG13(k0)
    sw	$14, OFFSET_REG14(k0)
    sw	$15, OFFSET_REG15(k0)
    sw	$16, OFFSET_REG16(k0)
    sw	$17, OFFSET_REG17(k0)
    sw	$18, OFFSET_REG18(k0)
    sw	$19, OFFSET_REG19(k0)
    sw	$20, OFFSET_REG20(k0)
    sw	$21, OFFSET_REG21(k0)
    sw	$22, OFFSET_REG22(k0)
    sw	$23, OFFSET_REG23(k0)
    sw	$24, OFFSET_REG24(k0)
    sw	$25, OFFSET_REG25(k0)

    sw	$28, OFFSET_REG28(k0)
    sw	$29, OFFSET_REG29(k0)
    sw	$30, OFFSET_REG30(k0)
    sw	$31, OFFSET_REG31(k0)
   
    mfc0 k1, CP0_STATUS
    sw   k1, OFFSET_STATUS(k0)

    mfhi k1
    sw   k1, OFFSET_HI(k0)
    
    mflo k1
    sw   k1, OFFSET_LO(k0)
    
    mfc0 k1, CP0_BADVADDR
    sw   k1, OFFSET_BADVADDR(k0)
    
    mfc0 k1, CP0_CAUSE
    sw   k1, OFFSET_CAUSE(k0)
    
    mfc0 k1, CP0_EPC
    sw   k1, OFFSET_EPC(k0)
.endm

.macro RESTORE_CONTEXT offset
    .set noat
    sw  t8, -4(sp)
    sw  t9, -8(sp)
    la	t9, current_running  //!!!
    lw	t9, 0(t9)
    addi t9, t9, \offset

    lw	$0, 0(t9)
    lw	$1, 4(t9)
    lw	$2, 8(t9)
    lw	$3, 12(t9)
    lw	$4, 16(t9)
    lw	$5, 20(t9)
    lw	$6, 24(t9)
    lw	$7, 28(t9)
    lw	$8, 32(t9)
    lw	$9, 36(t9)
    lw	$10, 40(t9)
    lw	$11, 44(t9)
    lw	$12, 48(t9)
    lw	$13, 52(t9)
    lw	$14, 56(t9)
    lw	$15, 60(t9)
    lw	$16, 64(t9)
    lw	$17, 68(t9)
    lw	$18, 72(t9)
    lw	$19, 76(t9)
    lw	$20, 80(t9)
    lw	$21, 84(t9)
    lw	$22, 88(t9)
    lw	$23, 92(t9)
//    lw	$24, 96(t9)
//    lw	$25, 100(t9)
    lw	$26, 104(t9)
    lw	$27, 108(t9)
    lw	$28, 112(t9)
    lw	$29, 116(t9)
    lw	$30, 120(t9)
    lw	$31, 124(t9)

    lw	t8, 128(t9)
    mtc0 t8, CP0_STATUS

    lw	t8, 132(t9)
    mthi t8

    lw	t8, 136(t9)
    mtlo t8

    lw	t8, 140(t9)
    mtc0 t8, CP0_BADVADDR

    lw	t8, 144(t9)
    mtc0 t8, CP0_CAUSE

    lw	t8, 148(t9)
    mtc0 t8, CP0_EPC
.endm

NESTED(do_scheduler, 0, ra)
    SAVE_CONTEXT(USER)
    jal     scheduler
    RESTORE_CONTEXT(USER)
    jr      ra
END(do_scheduler)

.global exception_handler_begin
.global exception_handler_end

NESTED(exception_handler_entry, 0, sp)   
exception_handler_begin:
    // TODO close interrupt
    // jmp exception_handler[i] which decided by CP0_CAUSE
    // Leve2 exception Handler.
exception_handler_end:
END(exception_handler_entry)

NESTED(handle_int, 0, sp)
    // interrupt handler
    // Leve3 exception Handler.
END(handle_int)

NESTED(handle_syscall, 0, sp)
    // system call handler
END(handle_syscall)

NESTED(handle_other, 0, sp)
    // other exception handler
END(handle_other)


